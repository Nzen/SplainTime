/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ws.nzen.tracking.splaintime.dao.jooq.Indexes;
import ws.nzen.tracking.splaintime.dao.jooq.Keys;
import ws.nzen.tracking.splaintime.dao.jooq.Public;
import ws.nzen.tracking.splaintime.dao.jooq.tables.records.StPersonRecord;


/**
 * ST only expects one, but thats fine
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StPerson extends TableImpl<StPersonRecord> {

    private static final long serialVersionUID = -502929497;

    /**
     * The reference instance of <code>PUBLIC.ST_PERSON</code>
     */
    public static final StPerson ST_PERSON = new StPerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StPersonRecord> getRecordType() {
        return StPersonRecord.class;
    }

    /**
     * The column <code>PUBLIC.ST_PERSON.PERSON_ID</code>.
     */
    public final TableField<StPersonRecord, Integer> PERSON_ID = createField(DSL.name("PERSON_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ST_PERSON.PERSON_DESC</code>.
     */
    public final TableField<StPersonRecord, String> PERSON_DESC = createField(DSL.name("PERSON_DESC"), org.jooq.impl.SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>PUBLIC.ST_PERSON.PASSWORD_HASH</code>.
     */
    public final TableField<StPersonRecord, String> PASSWORD_HASH = createField(DSL.name("PASSWORD_HASH"), org.jooq.impl.SQLDataType.VARCHAR(65), this, "");

    /**
     * The column <code>PUBLIC.ST_PERSON.PASSWORD_SALT</code>. Preferably unique
     */
    public final TableField<StPersonRecord, String> PASSWORD_SALT = createField(DSL.name("PASSWORD_SALT"), org.jooq.impl.SQLDataType.VARCHAR(4), this, "Preferably unique");

    /**
     * The column <code>PUBLIC.ST_PERSON.HASHING_ALGORITHM_ID</code>. fk
     */
    public final TableField<StPersonRecord, Integer> HASHING_ALGORITHM_ID = createField(DSL.name("HASHING_ALGORITHM_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "fk");

    /**
     * The column <code>PUBLIC.ST_PERSON.ADDED_WHEN</code>.
     */
    public final TableField<StPersonRecord, OffsetDateTime> ADDED_WHEN = createField(DSL.name("ADDED_WHEN"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.precision(6).defaultValue(org.jooq.impl.DSL.field("NOW()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>PUBLIC.ST_PERSON</code> table reference
     */
    public StPerson() {
        this(DSL.name("ST_PERSON"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_PERSON</code> table reference
     */
    public StPerson(String alias) {
        this(DSL.name(alias), ST_PERSON);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_PERSON</code> table reference
     */
    public StPerson(Name alias) {
        this(alias, ST_PERSON);
    }

    private StPerson(Name alias, Table<StPersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private StPerson(Name alias, Table<StPersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ST only expects one, but thats fine"));
    }

    public <O extends Record> StPerson(Table<O> child, ForeignKey<O, StPersonRecord> key) {
        super(child, key, ST_PERSON);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSON_FK_HASH_INDEX_5, Indexes.PRIMARY_KEY_5);
    }

    @Override
    public Identity<StPersonRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ST_PERSON;
    }

    @Override
    public UniqueKey<StPersonRecord> getPrimaryKey() {
        return Keys.PK_ST_PERSON;
    }

    @Override
    public List<UniqueKey<StPersonRecord>> getKeys() {
        return Arrays.<UniqueKey<StPersonRecord>>asList(Keys.PK_ST_PERSON);
    }

    @Override
    public List<ForeignKey<StPersonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StPersonRecord, ?>>asList(Keys.PERSON_FK_HASH);
    }

    public StHashingAlgorithm stHashingAlgorithm() {
        return new StHashingAlgorithm(this, Keys.PERSON_FK_HASH);
    }

    @Override
    public StPerson as(String alias) {
        return new StPerson(DSL.name(alias), this);
    }

    @Override
    public StPerson as(Name alias) {
        return new StPerson(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StPerson rename(String name) {
        return new StPerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StPerson rename(Name name) {
        return new StPerson(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Integer, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
