/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ws.nzen.tracking.splaintime.dao.jooq.Indexes;
import ws.nzen.tracking.splaintime.dao.jooq.Keys;
import ws.nzen.tracking.splaintime.dao.jooq.Public;
import ws.nzen.tracking.splaintime.dao.jooq.tables.records.StRecordingDeviceRecord;


/**
 * For representing the pc, phone that recorded tags
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StRecordingDevice extends TableImpl<StRecordingDeviceRecord> {

    private static final long serialVersionUID = 2014918416;

    /**
     * The reference instance of <code>PUBLIC.ST_RECORDING_DEVICE</code>
     */
    public static final StRecordingDevice ST_RECORDING_DEVICE = new StRecordingDevice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StRecordingDeviceRecord> getRecordType() {
        return StRecordingDeviceRecord.class;
    }

    /**
     * The column <code>PUBLIC.ST_RECORDING_DEVICE.RECORDING_DEVICE_ID</code>.
     */
    public final TableField<StRecordingDeviceRecord, Integer> RECORDING_DEVICE_ID = createField(DSL.name("RECORDING_DEVICE_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ST_RECORDING_DEVICE.RECORDING_DEVICE_DESC</code>.
     */
    public final TableField<StRecordingDeviceRecord, String> RECORDING_DEVICE_DESC = createField(DSL.name("RECORDING_DEVICE_DESC"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PUBLIC.ST_RECORDING_DEVICE.RECORDING_DEVICE_TYPE_ID</code>. fk; assume pc
     */
    public final TableField<StRecordingDeviceRecord, Integer> RECORDING_DEVICE_TYPE_ID = createField(DSL.name("RECORDING_DEVICE_TYPE_ID"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "fk; assume pc");

    /**
     * The column <code>PUBLIC.ST_RECORDING_DEVICE.HOME_DIR_GUID</code>.
     */
    public final TableField<StRecordingDeviceRecord, String> HOME_DIR_GUID = createField(DSL.name("HOME_DIR_GUID"), org.jooq.impl.SQLDataType.VARCHAR(39), this, "");

    /**
     * The column <code>PUBLIC.ST_RECORDING_DEVICE.IPV4_ADDRESS</code>. as an assist to initial user identification
     */
    public final TableField<StRecordingDeviceRecord, String> IPV4_ADDRESS = createField(DSL.name("IPV4_ADDRESS"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "as an assist to initial user identification");

    /**
     * Create a <code>PUBLIC.ST_RECORDING_DEVICE</code> table reference
     */
    public StRecordingDevice() {
        this(DSL.name("ST_RECORDING_DEVICE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_RECORDING_DEVICE</code> table reference
     */
    public StRecordingDevice(String alias) {
        this(DSL.name(alias), ST_RECORDING_DEVICE);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_RECORDING_DEVICE</code> table reference
     */
    public StRecordingDevice(Name alias) {
        this(alias, ST_RECORDING_DEVICE);
    }

    private StRecordingDevice(Name alias, Table<StRecordingDeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private StRecordingDevice(Name alias, Table<StRecordingDeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("For representing the pc, phone that recorded tags"));
    }

    public <O extends Record> StRecordingDevice(Table<O> child, ForeignKey<O, StRecordingDeviceRecord> key) {
        super(child, key, ST_RECORDING_DEVICE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_E, Indexes.RECDEVICE_FK_RECDEVICE_TYPE_INDEX_E);
    }

    @Override
    public Identity<StRecordingDeviceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ST_RECORDING_DEVICE;
    }

    @Override
    public UniqueKey<StRecordingDeviceRecord> getPrimaryKey() {
        return Keys.PK_ST_RECORDING_DEVICE;
    }

    @Override
    public List<UniqueKey<StRecordingDeviceRecord>> getKeys() {
        return Arrays.<UniqueKey<StRecordingDeviceRecord>>asList(Keys.PK_ST_RECORDING_DEVICE);
    }

    @Override
    public List<ForeignKey<StRecordingDeviceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StRecordingDeviceRecord, ?>>asList(Keys.RECDEVICE_FK_RECDEVICE_TYPE);
    }

    public StRecordingDeviceType stRecordingDeviceType() {
        return new StRecordingDeviceType(this, Keys.RECDEVICE_FK_RECDEVICE_TYPE);
    }

    @Override
    public StRecordingDevice as(String alias) {
        return new StRecordingDevice(DSL.name(alias), this);
    }

    @Override
    public StRecordingDevice as(Name alias) {
        return new StRecordingDevice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StRecordingDevice rename(String name) {
        return new StRecordingDevice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StRecordingDevice rename(Name name) {
        return new StRecordingDevice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
