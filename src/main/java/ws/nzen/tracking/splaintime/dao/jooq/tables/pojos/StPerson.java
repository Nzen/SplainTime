/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables.pojos;


import java.time.OffsetDateTime;

import javax.annotation.Generated;

import ws.nzen.tracking.splaintime.dao.jooq.tables.interfaces.IStPerson;


/**
 * ST only expects one, but thats fine
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StPerson implements IStPerson {

    private static final long serialVersionUID = -839468288;

    private Integer        personId;
    private String         personDesc;
    private String         passwordHash;
    private String         passwordSalt;
    private Integer        hashingAlgorithmId;
    private OffsetDateTime addedWhen;

    public StPerson() {}

    public StPerson(IStPerson value) {
        this.personId = value.getPersonId();
        this.personDesc = value.getPersonDesc();
        this.passwordHash = value.getPasswordHash();
        this.passwordSalt = value.getPasswordSalt();
        this.hashingAlgorithmId = value.getHashingAlgorithmId();
        this.addedWhen = value.getAddedWhen();
    }

    public StPerson(
        Integer        personId,
        String         personDesc,
        String         passwordHash,
        String         passwordSalt,
        Integer        hashingAlgorithmId,
        OffsetDateTime addedWhen
    ) {
        this.personId = personId;
        this.personDesc = personDesc;
        this.passwordHash = passwordHash;
        this.passwordSalt = passwordSalt;
        this.hashingAlgorithmId = hashingAlgorithmId;
        this.addedWhen = addedWhen;
    }

    @Override
    public Integer getPersonId() {
        return this.personId;
    }

    @Override
    public void setPersonId(Integer personId) {
        this.personId = personId;
    }

    @Override
    public String getPersonDesc() {
        return this.personDesc;
    }

    @Override
    public void setPersonDesc(String personDesc) {
        this.personDesc = personDesc;
    }

    @Override
    public String getPasswordHash() {
        return this.passwordHash;
    }

    @Override
    public void setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash;
    }

    @Override
    public String getPasswordSalt() {
        return this.passwordSalt;
    }

    @Override
    public void setPasswordSalt(String passwordSalt) {
        this.passwordSalt = passwordSalt;
    }

    @Override
    public Integer getHashingAlgorithmId() {
        return this.hashingAlgorithmId;
    }

    @Override
    public void setHashingAlgorithmId(Integer hashingAlgorithmId) {
        this.hashingAlgorithmId = hashingAlgorithmId;
    }

    @Override
    public OffsetDateTime getAddedWhen() {
        return this.addedWhen;
    }

    @Override
    public void setAddedWhen(OffsetDateTime addedWhen) {
        this.addedWhen = addedWhen;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StPerson (");

        sb.append(personId);
        sb.append(", ").append(personDesc);
        sb.append(", ").append(passwordHash);
        sb.append(", ").append(passwordSalt);
        sb.append(", ").append(hashingAlgorithmId);
        sb.append(", ").append(addedWhen);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IStPerson from) {
        setPersonId(from.getPersonId());
        setPersonDesc(from.getPersonDesc());
        setPasswordHash(from.getPasswordHash());
        setPasswordSalt(from.getPasswordSalt());
        setHashingAlgorithmId(from.getHashingAlgorithmId());
        setAddedWhen(from.getAddedWhen());
    }

    @Override
    public <E extends IStPerson> E into(E into) {
        into.from(this);
        return into;
    }
}
