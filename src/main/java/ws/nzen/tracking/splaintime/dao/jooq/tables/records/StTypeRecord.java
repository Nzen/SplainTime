/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ws.nzen.tracking.splaintime.dao.jooq.tables.StType;


/**
 * Descriptions that dont need type checking
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StTypeRecord extends UpdatableRecordImpl<StTypeRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1138145688;

    /**
     * Setter for <code>PUBLIC.ST_TYPE.TYPE_ID</code>.
     */
    public void setTypeId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TYPE.TYPE_ID</code>.
     */
    public Integer getTypeId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ST_TYPE.TYPE_DESC</code>.
     */
    public void setTypeDesc(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TYPE.TYPE_DESC</code>.
     */
    public String getTypeDesc() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ST_TYPE.OWN_TYPE</code>. fk; enabling simple heirarchy
     */
    public void setOwnType(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TYPE.OWN_TYPE</code>. fk; enabling simple heirarchy
     */
    public Integer getOwnType() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return StType.ST_TYPE.TYPE_ID;
    }

    @Override
    public Field<String> field2() {
        return StType.ST_TYPE.TYPE_DESC;
    }

    @Override
    public Field<Integer> field3() {
        return StType.ST_TYPE.OWN_TYPE;
    }

    @Override
    public Integer component1() {
        return getTypeId();
    }

    @Override
    public String component2() {
        return getTypeDesc();
    }

    @Override
    public Integer component3() {
        return getOwnType();
    }

    @Override
    public Integer value1() {
        return getTypeId();
    }

    @Override
    public String value2() {
        return getTypeDesc();
    }

    @Override
    public Integer value3() {
        return getOwnType();
    }

    @Override
    public StTypeRecord value1(Integer value) {
        setTypeId(value);
        return this;
    }

    @Override
    public StTypeRecord value2(String value) {
        setTypeDesc(value);
        return this;
    }

    @Override
    public StTypeRecord value3(Integer value) {
        setOwnType(value);
        return this;
    }

    @Override
    public StTypeRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StTypeRecord
     */
    public StTypeRecord() {
        super(StType.ST_TYPE);
    }

    /**
     * Create a detached, initialised StTypeRecord
     */
    public StTypeRecord(Integer typeId, String typeDesc, Integer ownType) {
        super(StType.ST_TYPE);

        set(0, typeId);
        set(1, typeDesc);
        set(2, ownType);
    }
}
