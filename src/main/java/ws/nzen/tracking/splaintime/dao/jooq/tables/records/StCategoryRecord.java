/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables.records;


import java.time.OffsetDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import ws.nzen.tracking.splaintime.dao.jooq.tables.StCategory;


/**
 * Characterizaton of tag, ex break or cooking
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StCategoryRecord extends UpdatableRecordImpl<StCategoryRecord> implements Record5<Integer, String, OffsetDateTime, Integer, Integer> {

    private static final long serialVersionUID = 1276529860;

    /**
     * Setter for <code>PUBLIC.ST_CATEGORY.CATEGORY_ID</code>.
     */
    public void setCategoryId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_CATEGORY.CATEGORY_ID</code>.
     */
    public Integer getCategoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ST_CATEGORY.CATEGORY_DESC</code>.
     */
    public void setCategoryDesc(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_CATEGORY.CATEGORY_DESC</code>.
     */
    public String getCategoryDesc() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ST_CATEGORY.EXPIRES_WHEN</code>.
     */
    public void setExpiresWhen(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_CATEGORY.EXPIRES_WHEN</code>.
     */
    public OffsetDateTime getExpiresWhen() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ST_CATEGORY.TYPE_ID</code>. fk
     */
    public void setTypeId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_CATEGORY.TYPE_ID</code>. fk
     */
    public Integer getTypeId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ST_CATEGORY.PARENT_ID</code>. fk
     */
    public void setParentId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_CATEGORY.PARENT_ID</code>. fk
     */
    public Integer getParentId() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, OffsetDateTime, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, OffsetDateTime, Integer, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return StCategory.ST_CATEGORY.CATEGORY_ID;
    }

    @Override
    public Field<String> field2() {
        return StCategory.ST_CATEGORY.CATEGORY_DESC;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return StCategory.ST_CATEGORY.EXPIRES_WHEN;
    }

    @Override
    public Field<Integer> field4() {
        return StCategory.ST_CATEGORY.TYPE_ID;
    }

    @Override
    public Field<Integer> field5() {
        return StCategory.ST_CATEGORY.PARENT_ID;
    }

    @Override
    public Integer component1() {
        return getCategoryId();
    }

    @Override
    public String component2() {
        return getCategoryDesc();
    }

    @Override
    public OffsetDateTime component3() {
        return getExpiresWhen();
    }

    @Override
    public Integer component4() {
        return getTypeId();
    }

    @Override
    public Integer component5() {
        return getParentId();
    }

    @Override
    public Integer value1() {
        return getCategoryId();
    }

    @Override
    public String value2() {
        return getCategoryDesc();
    }

    @Override
    public OffsetDateTime value3() {
        return getExpiresWhen();
    }

    @Override
    public Integer value4() {
        return getTypeId();
    }

    @Override
    public Integer value5() {
        return getParentId();
    }

    @Override
    public StCategoryRecord value1(Integer value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public StCategoryRecord value2(String value) {
        setCategoryDesc(value);
        return this;
    }

    @Override
    public StCategoryRecord value3(OffsetDateTime value) {
        setExpiresWhen(value);
        return this;
    }

    @Override
    public StCategoryRecord value4(Integer value) {
        setTypeId(value);
        return this;
    }

    @Override
    public StCategoryRecord value5(Integer value) {
        setParentId(value);
        return this;
    }

    @Override
    public StCategoryRecord values(Integer value1, String value2, OffsetDateTime value3, Integer value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StCategoryRecord
     */
    public StCategoryRecord() {
        super(StCategory.ST_CATEGORY);
    }

    /**
     * Create a detached, initialised StCategoryRecord
     */
    public StCategoryRecord(Integer categoryId, String categoryDesc, OffsetDateTime expiresWhen, Integer typeId, Integer parentId) {
        super(StCategory.ST_CATEGORY);

        set(0, categoryId);
        set(1, categoryDesc);
        set(2, expiresWhen);
        set(3, typeId);
        set(4, parentId);
    }
}
