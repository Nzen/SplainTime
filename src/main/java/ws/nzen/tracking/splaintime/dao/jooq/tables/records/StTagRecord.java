/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables.records;


import java.time.OffsetDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import ws.nzen.tracking.splaintime.dao.jooq.tables.StTag;
import ws.nzen.tracking.splaintime.dao.jooq.tables.interfaces.IStTag;


/**
 * The user entered text about what happened during that time
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StTagRecord extends UpdatableRecordImpl<StTagRecord> implements Record7<Integer, OffsetDateTime, OffsetDateTime, Integer, Integer, String, Boolean>, IStTag {

    private static final long serialVersionUID = -911027888;

    /**
     * Setter for <code>PUBLIC.ST_TAG.TAG_ID</code>.
     */
    @Override
    public void setTagId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.TAG_ID</code>.
     */
    @Override
    public Integer getTagId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ST_TAG.HAPPENED_WHEN</code>. ASK is this the resolved date or only when entered
     */
    @Override
    public void setHappenedWhen(OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.HAPPENED_WHEN</code>. ASK is this the resolved date or only when entered
     */
    @Override
    public OffsetDateTime getHappenedWhen() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ST_TAG.ADJUSTED_WHEN</code>. ASK is this null when not adjusted
     */
    @Override
    public void setAdjustedWhen(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.ADJUSTED_WHEN</code>. ASK is this null when not adjusted
     */
    @Override
    public OffsetDateTime getAdjustedWhen() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ST_TAG.RECORDING_DEVICE_ID</code>. fk
     */
    @Override
    public void setRecordingDeviceId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.RECORDING_DEVICE_ID</code>. fk
     */
    @Override
    public Integer getRecordingDeviceId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ST_TAG.PERSON_ID</code>. fk
     */
    @Override
    public void setPersonId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.PERSON_ID</code>. fk
     */
    @Override
    public Integer getPersonId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>PUBLIC.ST_TAG.TAG_VALUE</code>.
     */
    @Override
    public void setTagValue(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.TAG_VALUE</code>.
     */
    @Override
    public String getTagValue() {
        return (String) get(5);
    }

    /**
     * Setter for <code>PUBLIC.ST_TAG.ADJUSTED_WITH_HHMM</code>. Whether used -4 or -1:30
     */
    @Override
    public void setAdjustedWithHhmm(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_TAG.ADJUSTED_WITH_HHMM</code>. Whether used -4 or -1:30
     */
    @Override
    public Boolean getAdjustedWithHhmm() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, OffsetDateTime, OffsetDateTime, Integer, Integer, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, OffsetDateTime, OffsetDateTime, Integer, Integer, String, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return StTag.ST_TAG.TAG_ID;
    }

    @Override
    public Field<OffsetDateTime> field2() {
        return StTag.ST_TAG.HAPPENED_WHEN;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return StTag.ST_TAG.ADJUSTED_WHEN;
    }

    @Override
    public Field<Integer> field4() {
        return StTag.ST_TAG.RECORDING_DEVICE_ID;
    }

    @Override
    public Field<Integer> field5() {
        return StTag.ST_TAG.PERSON_ID;
    }

    @Override
    public Field<String> field6() {
        return StTag.ST_TAG.TAG_VALUE;
    }

    @Override
    public Field<Boolean> field7() {
        return StTag.ST_TAG.ADJUSTED_WITH_HHMM;
    }

    @Override
    public Integer component1() {
        return getTagId();
    }

    @Override
    public OffsetDateTime component2() {
        return getHappenedWhen();
    }

    @Override
    public OffsetDateTime component3() {
        return getAdjustedWhen();
    }

    @Override
    public Integer component4() {
        return getRecordingDeviceId();
    }

    @Override
    public Integer component5() {
        return getPersonId();
    }

    @Override
    public String component6() {
        return getTagValue();
    }

    @Override
    public Boolean component7() {
        return getAdjustedWithHhmm();
    }

    @Override
    public Integer value1() {
        return getTagId();
    }

    @Override
    public OffsetDateTime value2() {
        return getHappenedWhen();
    }

    @Override
    public OffsetDateTime value3() {
        return getAdjustedWhen();
    }

    @Override
    public Integer value4() {
        return getRecordingDeviceId();
    }

    @Override
    public Integer value5() {
        return getPersonId();
    }

    @Override
    public String value6() {
        return getTagValue();
    }

    @Override
    public Boolean value7() {
        return getAdjustedWithHhmm();
    }

    @Override
    public StTagRecord value1(Integer value) {
        setTagId(value);
        return this;
    }

    @Override
    public StTagRecord value2(OffsetDateTime value) {
        setHappenedWhen(value);
        return this;
    }

    @Override
    public StTagRecord value3(OffsetDateTime value) {
        setAdjustedWhen(value);
        return this;
    }

    @Override
    public StTagRecord value4(Integer value) {
        setRecordingDeviceId(value);
        return this;
    }

    @Override
    public StTagRecord value5(Integer value) {
        setPersonId(value);
        return this;
    }

    @Override
    public StTagRecord value6(String value) {
        setTagValue(value);
        return this;
    }

    @Override
    public StTagRecord value7(Boolean value) {
        setAdjustedWithHhmm(value);
        return this;
    }

    @Override
    public StTagRecord values(Integer value1, OffsetDateTime value2, OffsetDateTime value3, Integer value4, Integer value5, String value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IStTag from) {
        setTagId(from.getTagId());
        setHappenedWhen(from.getHappenedWhen());
        setAdjustedWhen(from.getAdjustedWhen());
        setRecordingDeviceId(from.getRecordingDeviceId());
        setPersonId(from.getPersonId());
        setTagValue(from.getTagValue());
        setAdjustedWithHhmm(from.getAdjustedWithHhmm());
    }

    @Override
    public <E extends IStTag> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StTagRecord
     */
    public StTagRecord() {
        super(StTag.ST_TAG);
    }

    /**
     * Create a detached, initialised StTagRecord
     */
    public StTagRecord(Integer tagId, OffsetDateTime happenedWhen, OffsetDateTime adjustedWhen, Integer recordingDeviceId, Integer personId, String tagValue, Boolean adjustedWithHhmm) {
        super(StTag.ST_TAG);

        set(0, tagId);
        set(1, happenedWhen);
        set(2, adjustedWhen);
        set(3, recordingDeviceId);
        set(4, personId);
        set(5, tagValue);
        set(6, adjustedWithHhmm);
    }
}
