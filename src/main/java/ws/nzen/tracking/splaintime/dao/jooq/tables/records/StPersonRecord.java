/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables.records;


import java.time.OffsetDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import ws.nzen.tracking.splaintime.dao.jooq.tables.StPerson;


/**
 * ST only expects one, but thats fine
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StPersonRecord extends UpdatableRecordImpl<StPersonRecord> implements Record6<Integer, String, String, String, Integer, OffsetDateTime> {

    private static final long serialVersionUID = 113931859;

    /**
     * Setter for <code>PUBLIC.ST_PERSON.PERSON_ID</code>.
     */
    public void setPersonId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_PERSON.PERSON_ID</code>.
     */
    public Integer getPersonId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ST_PERSON.PERSON_DESC</code>.
     */
    public void setPersonDesc(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_PERSON.PERSON_DESC</code>.
     */
    public String getPersonDesc() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ST_PERSON.PASSWORD_HASH</code>.
     */
    public void setPasswordHash(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_PERSON.PASSWORD_HASH</code>.
     */
    public String getPasswordHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ST_PERSON.PASSWORD_SALT</code>. Preferably unique
     */
    public void setPasswordSalt(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_PERSON.PASSWORD_SALT</code>. Preferably unique
     */
    public String getPasswordSalt() {
        return (String) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ST_PERSON.HASHING_ALGORITHM_ID</code>. fk
     */
    public void setHashingAlgorithmId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_PERSON.HASHING_ALGORITHM_ID</code>. fk
     */
    public Integer getHashingAlgorithmId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>PUBLIC.ST_PERSON.ADDED_WHEN</code>.
     */
    public void setAddedWhen(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.ST_PERSON.ADDED_WHEN</code>.
     */
    public OffsetDateTime getAddedWhen() {
        return (OffsetDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Integer, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, String, String, Integer, OffsetDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return StPerson.ST_PERSON.PERSON_ID;
    }

    @Override
    public Field<String> field2() {
        return StPerson.ST_PERSON.PERSON_DESC;
    }

    @Override
    public Field<String> field3() {
        return StPerson.ST_PERSON.PASSWORD_HASH;
    }

    @Override
    public Field<String> field4() {
        return StPerson.ST_PERSON.PASSWORD_SALT;
    }

    @Override
    public Field<Integer> field5() {
        return StPerson.ST_PERSON.HASHING_ALGORITHM_ID;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return StPerson.ST_PERSON.ADDED_WHEN;
    }

    @Override
    public Integer component1() {
        return getPersonId();
    }

    @Override
    public String component2() {
        return getPersonDesc();
    }

    @Override
    public String component3() {
        return getPasswordHash();
    }

    @Override
    public String component4() {
        return getPasswordSalt();
    }

    @Override
    public Integer component5() {
        return getHashingAlgorithmId();
    }

    @Override
    public OffsetDateTime component6() {
        return getAddedWhen();
    }

    @Override
    public Integer value1() {
        return getPersonId();
    }

    @Override
    public String value2() {
        return getPersonDesc();
    }

    @Override
    public String value3() {
        return getPasswordHash();
    }

    @Override
    public String value4() {
        return getPasswordSalt();
    }

    @Override
    public Integer value5() {
        return getHashingAlgorithmId();
    }

    @Override
    public OffsetDateTime value6() {
        return getAddedWhen();
    }

    @Override
    public StPersonRecord value1(Integer value) {
        setPersonId(value);
        return this;
    }

    @Override
    public StPersonRecord value2(String value) {
        setPersonDesc(value);
        return this;
    }

    @Override
    public StPersonRecord value3(String value) {
        setPasswordHash(value);
        return this;
    }

    @Override
    public StPersonRecord value4(String value) {
        setPasswordSalt(value);
        return this;
    }

    @Override
    public StPersonRecord value5(Integer value) {
        setHashingAlgorithmId(value);
        return this;
    }

    @Override
    public StPersonRecord value6(OffsetDateTime value) {
        setAddedWhen(value);
        return this;
    }

    @Override
    public StPersonRecord values(Integer value1, String value2, String value3, String value4, Integer value5, OffsetDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StPersonRecord
     */
    public StPersonRecord() {
        super(StPerson.ST_PERSON);
    }

    /**
     * Create a detached, initialised StPersonRecord
     */
    public StPersonRecord(Integer personId, String personDesc, String passwordHash, String passwordSalt, Integer hashingAlgorithmId, OffsetDateTime addedWhen) {
        super(StPerson.ST_PERSON);

        set(0, personId);
        set(1, personDesc);
        set(2, passwordHash);
        set(3, passwordSalt);
        set(4, hashingAlgorithmId);
        set(5, addedWhen);
    }
}
