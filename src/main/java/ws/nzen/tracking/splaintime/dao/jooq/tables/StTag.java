/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ws.nzen.tracking.splaintime.dao.jooq.Indexes;
import ws.nzen.tracking.splaintime.dao.jooq.Keys;
import ws.nzen.tracking.splaintime.dao.jooq.Public;
import ws.nzen.tracking.splaintime.dao.jooq.tables.records.StTagRecord;


/**
 * The user entered text about what happened during that time
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StTag extends TableImpl<StTagRecord> {

    private static final long serialVersionUID = 1863562748;

    /**
     * The reference instance of <code>PUBLIC.ST_TAG</code>
     */
    public static final StTag ST_TAG = new StTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StTagRecord> getRecordType() {
        return StTagRecord.class;
    }

    /**
     * The column <code>PUBLIC.ST_TAG.TAG_ID</code>.
     */
    public final TableField<StTagRecord, Integer> TAG_ID = createField(DSL.name("TAG_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ST_TAG.HAPPENED_WHEN</code>. ASK is this the resolved date or only when entered
     */
    public final TableField<StTagRecord, OffsetDateTime> HAPPENED_WHEN = createField(DSL.name("HAPPENED_WHEN"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.precision(6).defaultValue(org.jooq.impl.DSL.field("NOW()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "ASK is this the resolved date or only when entered");

    /**
     * The column <code>PUBLIC.ST_TAG.ADJUSTED_WHEN</code>. ASK is this null when not adjusted
     */
    public final TableField<StTagRecord, OffsetDateTime> ADJUSTED_WHEN = createField(DSL.name("ADJUSTED_WHEN"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.precision(6), this, "ASK is this null when not adjusted");

    /**
     * The column <code>PUBLIC.ST_TAG.RECORDING_DEVICE_ID</code>. fk
     */
    public final TableField<StTagRecord, Integer> RECORDING_DEVICE_ID = createField(DSL.name("RECORDING_DEVICE_ID"), org.jooq.impl.SQLDataType.INTEGER, this, "fk");

    /**
     * The column <code>PUBLIC.ST_TAG.PERSON_ID</code>. fk
     */
    public final TableField<StTagRecord, Integer> PERSON_ID = createField(DSL.name("PERSON_ID"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "fk");

    /**
     * The column <code>PUBLIC.ST_TAG.TAG_VALUE</code>.
     */
    public final TableField<StTagRecord, String> TAG_VALUE = createField(DSL.name("TAG_VALUE"), org.jooq.impl.SQLDataType.VARCHAR(90), this, "");

    /**
     * The column <code>PUBLIC.ST_TAG.ADJUSTED_WITH_HHMM</code>. Whether used -4 or -1:30
     */
    public final TableField<StTagRecord, Boolean> ADJUSTED_WITH_HHMM = createField(DSL.name("ADJUSTED_WITH_HHMM"), org.jooq.impl.SQLDataType.BOOLEAN, this, "Whether used -4 or -1:30");

    /**
     * Create a <code>PUBLIC.ST_TAG</code> table reference
     */
    public StTag() {
        this(DSL.name("ST_TAG"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_TAG</code> table reference
     */
    public StTag(String alias) {
        this(DSL.name(alias), ST_TAG);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_TAG</code> table reference
     */
    public StTag(Name alias) {
        this(alias, ST_TAG);
    }

    private StTag(Name alias, Table<StTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private StTag(Name alias, Table<StTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The user entered text about what happened during that time"));
    }

    public <O extends Record> StTag(Table<O> child, ForeignKey<O, StTagRecord> key) {
        super(child, key, ST_TAG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_EC, Indexes.TAG_FK_PERSON_INDEX_E, Indexes.TAG_FK_RECDEVICE_INDEX_E);
    }

    @Override
    public Identity<StTagRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ST_TAG;
    }

    @Override
    public UniqueKey<StTagRecord> getPrimaryKey() {
        return Keys.PK_ST_TAG;
    }

    @Override
    public List<UniqueKey<StTagRecord>> getKeys() {
        return Arrays.<UniqueKey<StTagRecord>>asList(Keys.PK_ST_TAG);
    }

    @Override
    public List<ForeignKey<StTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StTagRecord, ?>>asList(Keys.TAG_FK_RECDEVICE, Keys.TAG_FK_PERSON);
    }

    public StRecordingDevice stRecordingDevice() {
        return new StRecordingDevice(this, Keys.TAG_FK_RECDEVICE);
    }

    public StPerson stPerson() {
        return new StPerson(this, Keys.TAG_FK_PERSON);
    }

    @Override
    public StTag as(String alias) {
        return new StTag(DSL.name(alias), this);
    }

    @Override
    public StTag as(Name alias) {
        return new StTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StTag rename(String name) {
        return new StTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StTag rename(Name name) {
        return new StTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, OffsetDateTime, OffsetDateTime, Integer, Integer, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
