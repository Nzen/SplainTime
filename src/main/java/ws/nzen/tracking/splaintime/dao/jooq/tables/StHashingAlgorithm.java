/*
 * This file is generated by jOOQ.
 */
package ws.nzen.tracking.splaintime.dao.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ws.nzen.tracking.splaintime.dao.jooq.Indexes;
import ws.nzen.tracking.splaintime.dao.jooq.Keys;
import ws.nzen.tracking.splaintime.dao.jooq.Public;
import ws.nzen.tracking.splaintime.dao.jooq.tables.records.StHashingAlgorithmRecord;


/**
 * How we hashed the person password
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StHashingAlgorithm extends TableImpl<StHashingAlgorithmRecord> {

    private static final long serialVersionUID = -825851222;

    /**
     * The reference instance of <code>PUBLIC.ST_HASHING_ALGORITHM</code>
     */
    public static final StHashingAlgorithm ST_HASHING_ALGORITHM = new StHashingAlgorithm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StHashingAlgorithmRecord> getRecordType() {
        return StHashingAlgorithmRecord.class;
    }

    /**
     * The column <code>PUBLIC.ST_HASHING_ALGORITHM.HASHING_ALGORITHM_ID</code>.
     */
    public final TableField<StHashingAlgorithmRecord, Integer> HASHING_ALGORITHM_ID = createField(DSL.name("HASHING_ALGORITHM_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ST_HASHING_ALGORITHM.HASHING_ALGORITHM_DESC</code>.
     */
    public final TableField<StHashingAlgorithmRecord, String> HASHING_ALGORITHM_DESC = createField(DSL.name("HASHING_ALGORITHM_DESC"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>PUBLIC.ST_HASHING_ALGORITHM</code> table reference
     */
    public StHashingAlgorithm() {
        this(DSL.name("ST_HASHING_ALGORITHM"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_HASHING_ALGORITHM</code> table reference
     */
    public StHashingAlgorithm(String alias) {
        this(DSL.name(alias), ST_HASHING_ALGORITHM);
    }

    /**
     * Create an aliased <code>PUBLIC.ST_HASHING_ALGORITHM</code> table reference
     */
    public StHashingAlgorithm(Name alias) {
        this(alias, ST_HASHING_ALGORITHM);
    }

    private StHashingAlgorithm(Name alias, Table<StHashingAlgorithmRecord> aliased) {
        this(alias, aliased, null);
    }

    private StHashingAlgorithm(Name alias, Table<StHashingAlgorithmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("How we hashed the person password"));
    }

    public <O extends Record> StHashingAlgorithm(Table<O> child, ForeignKey<O, StHashingAlgorithmRecord> key) {
        super(child, key, ST_HASHING_ALGORITHM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    @Override
    public Identity<StHashingAlgorithmRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ST_HASHING_ALGORITHM;
    }

    @Override
    public UniqueKey<StHashingAlgorithmRecord> getPrimaryKey() {
        return Keys.PK_ST_HASHING_ALGORITHM;
    }

    @Override
    public List<UniqueKey<StHashingAlgorithmRecord>> getKeys() {
        return Arrays.<UniqueKey<StHashingAlgorithmRecord>>asList(Keys.PK_ST_HASHING_ALGORITHM);
    }

    @Override
    public StHashingAlgorithm as(String alias) {
        return new StHashingAlgorithm(DSL.name(alias), this);
    }

    @Override
    public StHashingAlgorithm as(Name alias) {
        return new StHashingAlgorithm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StHashingAlgorithm rename(String name) {
        return new StHashingAlgorithm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StHashingAlgorithm rename(Name name) {
        return new StHashingAlgorithm(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
